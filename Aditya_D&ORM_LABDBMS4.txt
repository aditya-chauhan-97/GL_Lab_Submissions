create table if not exists `supplier`(
`SUPP_ID` int primary key,
`SUPP_NAME` varchar(50) NOT NULL,
`SUPP_CITY` varchar(50),
`SUPP_PHONE` varchar(10) NOT NULL
);


CREATE TABLE IF NOT EXISTS `customer` (
 `CUS_ID` INT NOT NULL PRIMARY KEY,
 `CUS_NAME` VARCHAR(20) NOT NULL,
 `CUS_PHONE` VARCHAR(10) NOT NULL,
 `CUS_CITY` varchar(30) NOT NULL,
 `CUS_GENDER` CHAR);


CREATE TABLE IF NOT EXISTS `category` (
 `CAT_ID` INT NOT NULL PRIMARY KEY,
 `CAT_NAME` VARCHAR(20) NOT NULL
);



CREATE TABLE IF NOT EXISTS `product` (
 `PRO_ID` INT NOT NULL PRIMARY KEY,
 `PRO_NAME` VARCHAR(20) NOT NULL DEFAULT "Dummy Product",
 `PRO_DESC` VARCHAR(60),
 `CAT_ID` INT NOT NULL,
 FOREIGN KEY (`CAT_ID`) REFERENCES CATEGORY (`CAT_ID`)
 );
 

CREATE TABLE IF NOT EXISTS `supplier_pricing` (
 `PRICING_ID` INT NOT NULL primary key,
 `PRO_ID` INT NOT NULL,
 `SUPP_ID` INT NOT NULL,
 `SUPP_PRICE` INT DEFAULT 0,
 FOREIGN KEY (`PRO_ID`) REFERENCES PRODUCT (`PRO_ID`),
 FOREIGN KEY (`SUPP_ID`) REFERENCES SUPPLIER(`SUPP_ID`)
 );



CREATE TABLE IF NOT EXISTS `order` (
 `ORD_ID` INT NOT NULL PRIMARY KEY,
 `ORD_AMOUNT` INT NOT NULL,
 `ORD_DATE` DATE,
 `CUS_ID` INT NOT NULL,
 `PRICING_ID` INT NOT NULL,
 FOREIGN KEY (`CUS_ID`) REFERENCES CUSTOMER(`CUS_ID`),
 FOREIGN KEY (`PRICING_ID`) REFERENCES SUPPLIER_PRICING(`PRICING_ID`)
 );



CREATE TABLE IF NOT EXISTS `rating` (
 `RAT_ID` INT NOT NULL PRIMARY KEY,
 `ORD_ID` INT NOT NULL,
 `RAT_RATSTARS` INT NOT NULL,
 FOREIGN KEY (`ORD_ID`) REFERENCES `ORDER` (`ORD_ID`)
 );



/* INSERT DATA */

INSERT INTO SUPPLIER VALUES(1,"Rajesh Retails","Delhi",'1234567890');
INSERT INTO SUPPLIER VALUES(2,"Appario Ltd.","Mumbai",'2589631470');
INSERT INTO SUPPLIER VALUES(3,"Knome products","Banglore",'9785462315');
INSERT INTO SUPPLIER VALUES(4,"Bansal Retails","Kochi",'8975463285');
INSERT INTO SUPPLIER VALUES(5,"Mittal Ltd.","Lucknow",'7898456532');

INSERT INTO CUSTOMER VALUES(1,"AAKASH",'9999999999',"DELHI",'M');
INSERT INTO CUSTOMER VALUES(2,"AMAN",'9785463215',"NOIDA",'M');
INSERT INTO CUSTOMER VALUES(3,"NEHA",'9999999999',"MUMBAI",'F');
INSERT INTO CUSTOMER VALUES(4,"MEGHA",'9994562399',"KOLKATA",'F');
INSERT INTO CUSTOMER VALUES(5,"PULKIT",'7895999999',"LUCKNOW",'M');

INSERT INTO CATEGORY VALUES( 1,"BOOKS");
INSERT INTO CATEGORY VALUES(2,"GAMES");
INSERT INTO CATEGORY VALUES(3,"GROCERIES");
INSERT INTO CATEGORY VALUES (4,"ELECTRONICS");
INSERT INTO CATEGORY VALUES(5,"CLOTHES");

INSERT INTO PRODUCT VALUES(1,"GTA V","Windows 7 and above with i5 processor and 8GB RAM",2);
INSERT INTO PRODUCT VALUES(2,"TSHIRT","SIZE-L with Black, Blue and White variations",5);
INSERT INTO PRODUCT VALUES(3,"ROG LAPTOP","Windows 10 with 15inch screen, i7 processor, 1TB SSD",4);
INSERT INTO PRODUCT VALUES(4,"OATS","Highly Nutritious from Nestle",3);
INSERT INTO PRODUCT VALUES(5,"HARRY POTTER","Best Collection of all time by J.K Rowling",1);
INSERT INTO PRODUCT VALUES(6,"MILK","1L Toned MIlk",3);
INSERT INTO PRODUCT VALUES(7,"Boat EarPhones","1.5Meter long Dolby Atmos",4);
INSERT INTO PRODUCT VALUES(8,"Jeans","Stretchable Denim Jeans with various sizes and color",5);
INSERT INTO PRODUCT VALUES(9,"Project IGI","compatible with windows 7 and above",2);
INSERT INTO PRODUCT VALUES(10,"Hoodie","Black GUCCI for 13 yrs and above",5);
INSERT INTO PRODUCT VALUES(11,"Rich Dad Poor Dad","Written by RObert Kiyosaki",1);
INSERT INTO PRODUCT VALUES(12,"Train Your Brain","By Shireen Stephen",1);

INSERT INTO SUPPLIER_PRICING VALUES(1,1,2,1500);
INSERT INTO SUPPLIER_PRICING VALUES(2,3,5,30000);
INSERT INTO SUPPLIER_PRICING VALUES(3,5,1,3000);
INSERT INTO SUPPLIER_PRICING VALUES(4,2,3,2500);
INSERT INTO SUPPLIER_PRICING VALUES(5,4,1,1000);
INSERT INTO SUPPLIER_PRICING VALUES(6,12,2,780);
INSERT INTO SUPPLIER_PRICING VALUES(7,12,4,789);
INSERT INTO SUPPLIER_PRICING VALUES(8,3,1,31000);
INSERT INTO SUPPLIER_PRICING VALUES(9,1,5,1450);
INSERT INTO SUPPLIER_PRICING VALUES(10,4,2,999);
INSERT INTO SUPPLIER_PRICING VALUES(11,7,3,549);
INSERT INTO SUPPLIER_PRICING VALUES(12,7,4,529);
INSERT INTO SUPPLIER_PRICING VALUES(13,6,2,105);
INSERT INTO SUPPLIER_PRICING VALUES(14,6,1,99);
INSERT INTO SUPPLIER_PRICING VALUES(15,2,5,2999);
INSERT INTO SUPPLIER_PRICING VALUES(16,5,2,2999);

INSERT INTO `ORDER` VALUES (101,1500,"2021-10-06",2,1);
INSERT INTO `ORDER` VALUES(102,1000,"2021-10-12",3,5);
INSERT INTO `ORDER` VALUES(103,30000,"2021-09-16",5,2);
INSERT INTO `ORDER` VALUES(104,1500,"2021-10-05",1,1);
INSERT INTO `ORDER` VALUES(105,3000,"2021-08-16",4,3);
INSERT INTO `ORDER` VALUES(106,1450,"2021-08-18",1,9);
INSERT INTO `ORDER` VALUES(107,789,"2021-09-01",3,7);
INSERT INTO `ORDER` VALUES(108,780,"2021-09-07",5,6);
INSERT INTO `ORDER` VALUES(109,3000,"2021-09-10",5,3);
INSERT INTO `ORDER` VALUES(110,2500,"2021-09-10",2,4);
INSERT INTO `ORDER` VALUES(111,1000,"2021-09-15",4,5);
INSERT INTO `ORDER` VALUES(112,789,"2021-09-16",4,7);
INSERT INTO `ORDER` VALUES(113,31000,"2021-09-16",1,8);
INSERT INTO `ORDER` VALUES(114,1000,"2021-09-16",3,5);
INSERT INTO `ORDER` VALUES(115,3000,"2021-09-16",5,3);
INSERT INTO `ORDER` VALUES(116,99,"2021-09-17",2,14);

INSERT INTO RATING VALUES(1,101,4);
INSERT INTO RATING VALUES(2,102,3);
INSERT INTO RATING VALUES(3,103,1);
INSERT INTO RATING VALUES(4,104,2);
INSERT INTO RATING VALUES(5,105,4);
INSERT INTO RATING VALUES(6,106,3);
INSERT INTO RATING VALUES(7,107,4);
INSERT INTO RATING VALUES(8,108,4);
INSERT INTO RATING VALUES(9,109,3);
INSERT INTO RATING VALUES(10,110,5);
INSERT INTO RATING VALUES(11,111,3);
INSERT INTO RATING VALUES(12,112,4);
INSERT INTO RATING VALUES(13,113,2);
INSERT INTO RATING VALUES(14,114,1);
INSERT INTO RATING VALUES(15,115,1);
INSERT INTO RATING VALUES(16,116,0);

/* QUERIES */

# Display all the orders along with product name ordered 
# by a customer having Customer_Id=2

select `order`.*, product.pro_name, customer.cus_name from `order`, supplier_pricing, product, customer
where 
	`order`.pricing_id = supplier_pricing.pricing_id and
    supplier_pricing.pro_id  = product.pro_id and
    `order`.cus_id = customer.cus_id and 
    customer.cus_id = 2;



# Display the total number of customers based on gender 
# who have placed orders of worth at least Rs.3000.

select count(cus_gender) as TotalNoOfCustomers, cus_gender 
from 
(
	select cus_gender, cus_name from customer as cus
	inner join
	(
		select ord_id, cus_id from `order` where ord_amount >= '3000'
	)
	as o
	on cus.cus_id = o.cus_id
	group by cus.cus_id
)
as T
group by cus_gender


# Display the Supplier details of who is supplying 
# more than one product.

select sup.supp_id, supp_name, supp_city, supp_phone 
from supplier as sup
inner join
(
	select supp_id from supplier_pricing group by 
	supp_id having count(supp_id) > 1 
) 
as sp
on sup.supp_id = sp.supp_id;



# Find the least expensive product from each category 
# and print the table with category id, name,product name and 
# price of the product


SET sql_mode=(SELECT REPLACE(@@sql_mode, 'ONLY_FULL_GROUP_BY', ''));


select cat.CAT_ID, CAT_NAME, PRO_ID, PRO_NAME, min(MIN_PRICE) as MinProductPrice from category as cat
inner join
(
	select prod.PRO_ID, PRO_NAME, CAT_ID, MIN_PRICE from product as prod
	inner join
	(
		select pro_id as PRO_ID, min(supp_price) as MIN_PRICE from supplier_pricing 
		group by pro_id
	) 
	as sp
	on prod.pro_id = sp.pro_id
)
as pro_sp
on cat.cat_id = pro_sp.CAT_ID
group by cat_id


# Display the Id and Name of the Product ordered 
# after “2021-10-05”.



select p.pro_id, p.pro_name from product as p 
inner join 
(
	select sp.pro_id, sp.pricing_id from supplier_pricing as sp
	inner join
	(
		select pricing_id from `order` where ord_date > "2021-10-05"
	) 
	as o
	on sp.pricing_id = o.pricing_id
) 
as sp_o
on p.pro_id = sp_o.pro_id;



# Display customer name and gender whose names start or 
# end with character 'A'.

select customer.cus_name,customer.cus_gender from customer 
where customer.cus_name like 'A%' or customer.cus_name like '%A';


# Create a stored procedure to display supplier id, name, rating and Type_of_Service. For Type_of_Service, If rating =5, print “Excellent
# Service”,If rating >4 print “Good Service”, If rating >2 print “Average Service” else print “Poor Service”.


DELIMITER $$
CREATE PROCEDURE get_supplier_rating_info()
BEGIN
select report.supp_id as Supplier_ID, report.supp_name as Supplier_Name, report.AverageRating as Average_Rating,
CASE
WHEN report.AverageRating =5 THEN 'Excellent Service'
WHEN report.AverageRating >4 THEN 'Good Service'
WHEN report.AverageRating >2 THEN 'Average Service'
ELSE 'Poor Service'
END 
AS Type_of_Service 
from
(
	select supplier.supp_name, final.supp_id, final.AverageRating from
	(	
		
        select sp_orra.supp_id, avg(sp_orra.rat_ratstars) as AverageRating from
		(
			select supplier_pricing.supp_id, orra.ORD_ID, orra.RAT_RATSTARS from supplier_pricing 
            inner join
			(
				select `order`.pricing_id, rating.ORD_ID, rating.RAT_RATSTARS from `order` inner join rating on rating.`ord_id` = `order`.ord_id 
			) 
			as orra
			on orra.pricing_id = supplier_pricing.pricing_id
		)
		as sp_orra 
		group by supplier_pricing.supp_id
	)
	as final 
	inner join 
	supplier 
	where final.supp_id = supplier.supp_id
) 
as report;
END$$

call get_supplier_rating_info();





